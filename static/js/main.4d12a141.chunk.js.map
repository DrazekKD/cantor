{"version":3,"sources":["img/euro.svg","img/zloty.svg","transactions/duck/types.js","transactions/components/ConvertValue/ConvertValue.js","transactions/components/InformationTransaction/InformationTransaction.js","transactions/components/ListTransactions/ListTransactions.js","transactions/components/AddTransactions/AddTransactions.js","transactions/components/ExchangeRate/ExchangeRate.js","transactions/components/TopTransactions/TopTransactions.js","transactions/components/SumTransactions/SumTransactions.js","App.js","serviceWorker.js","transactions/duck/reducers.js","transactions/duck/index.js","reducers.js","store.js","index.js"],"names":["module","exports","ConvertValue","props","Math","round","amountEuro","exchangeRate","InformationTransaction","className","name","src","euroLogo","alt","width","height","zlotyLogo","ListTransactions","dispatch","useDispatch","transactions","useSelector","state","list","map","transaction","key","id","onClick","type","transactionsType","item","INITIAL_STATE","AddTransactions","useReducer","newState","nameTransactionInput","amountEuroTransactionInput","inputsContent","setInputContent","handleInputChange","e","target","value","isDisabled","placeholder","onChange","newTransaction","uniqid","parseFloat","disabled","ExchangeRate","useState","inputContent","TopTransactions","topFiveTransactions","sort","a","b","slice","SumTransactions","sumEuroAllTransactions","reduce","sum","App","Boolean","window","location","hostname","match","idGenerator","transactionsReducer","action","types","filter","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,mC,kSCI5B,EAJS,kBAIT,EAHY,qBAGZ,EAFa,uBCIbC,EALM,SAACC,GAAD,OACpB,6BACEC,KAAKC,MAAOF,EAAMG,YAAeH,EAAMI,aAAmBJ,EAAMI,aAAV,GAA4B,KAAO,M,gCCwB7EC,G,MArBgB,SAACL,GAAD,OAC9B,yBAAKM,UAAU,aACXN,EAAMO,MAAQ,yBAAKD,UAAU,qCAAqCN,EAAMO,MAC3E,yBAAKD,UAAU,UACd,yBAAKA,UAAU,+BACd,kBAAC,EAAD,CACCH,WAAYH,EAAMG,aACnB,yBAAKK,IAAKC,IAAUC,IAAI,GAAGC,MAAO,GAAIC,OAAQ,OAGhD,yBAAKN,UAAU,UACd,yBAAKA,UAAU,+BACd,kBAAC,EAAD,CACCH,WAAYH,EAAMG,WAClBC,aAAcJ,EAAMI,eAErB,yBAAKI,IAAKK,IAAWH,IAAI,GAAGC,MAAO,GAAIC,OAAQ,UCapCE,G,MA7BU,WAExB,IAAMC,EAAWC,cACXC,EAAeC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aAAaG,QACvDhB,EAAec,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aAAab,gBAM7D,OAAO,6BACLa,EAAaI,KAAI,SAAAC,GAAW,OAC5B,yBAAKC,IAAKD,EAAYE,GAAIlB,UAAU,iDACnC,4BACCA,UAAU,oBACVmB,QAAS,kBATcD,EASQF,EAAYE,QAR9CT,EAAS,CAACW,KAAKC,EAAqCC,KAAKJ,IADhC,IAACA,KAWxB,kBAAC,EAAD,CACCjB,KAAMe,EAAYf,KAClBJ,WAAYmB,EAAYnB,WACxBC,aAAcA,W,mQCnBnB,IAAMyB,EACC,GADDA,EAEO,EAqEEC,EAlES,WACvB,IAAMf,EAAWC,cADY,EAGYe,sBACxC,SAACZ,EAAMa,GAAP,O,yVAAA,IAAuBb,EAAvB,GAAiCa,KACjC,CACCC,qBAAsBJ,EACtBK,2BAA4BL,IAPD,mBAGtBM,EAHsB,KAGPC,EAHO,KAWvBC,EAAoB,SAAAC,GAAC,OAAIF,EAAgB,eAAEE,EAAEC,OAAOhC,KAAM+B,EAAEC,OAAOC,SAmBnEC,EAAoD,KAAvCN,EAAcF,sBAA+BE,EAAcD,4BAA8B,EAC5G,OACC,6BAAS5B,UAAU,8CAClB,uBAAGA,UAAU,iBAAb,uBAGA,yBAAKA,UAAU,iCACd,2BACCA,UAAU,QACVoB,KAAK,OACLnB,KAAK,uBACLiC,MAAOL,EAAcF,qBACrBS,YAAY,mBACZC,SAAUN,IACX,yBAAK/B,UAAU,kCACd,2BACCA,UAAU,QACVoB,KAAK,SACLnB,KAAK,6BACLiC,MAAOL,EAAcD,2BACrBQ,YAAY,6BACZC,SAAUN,IACX,yBAAK7B,IAAKC,IAAUC,IAAI,GAAGC,MAAO,GAAIC,OAAQ,MAG/C,4BACCN,UAAU,oBACVmB,QA7CgB,WACnB,IAAMmB,EAAiB,CACtBpB,GAAIqB,MACJtC,KAAM4B,EAAcF,qBACpB9B,WAAY2C,WAAWX,EAAcD,6BAGtCnB,EAAS,CACRW,KAAMC,EACNC,KAAMgB,IAGPR,EAAgB,CACfH,qBAAsBJ,EACtBK,2BAA4BL,KAgC1BkB,SAAUN,GAHX,UClBWO,G,MA1CM,WACpB,IAAMjC,EAAWC,cACXZ,EAAec,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aAAab,gBAFnC,EAGc6C,mBAAS7C,GAHvB,mBAGnB8C,EAHmB,KAGLd,EAHK,KAS1B,OACC,6BAAS9B,UAAU,oBAClB,uBAAGA,UAAU,iBAAb,gCAGA,yBAAKA,UAAU,+BACd,yBAAKA,UAAU,2BACd,yBAAKA,UAAU,gCACd,mCACA,yBAAKE,IAAKC,IAAUC,IAAI,GAAGC,MAAO,GAAIC,OAAQ,KAC9C,oCAED,yBAAKN,UAAU,iCACd,2BACCA,UAAU,QACVoB,KAAK,SACLnB,KAAK,6BACLiC,MAAOU,EACPR,YAAY,6BACZC,SAvBoB,SAAAL,GAAC,OAAIF,EAAgBE,EAAEC,OAAOC,UAwBnD,yBAAKhC,IAAKK,IAAWH,IAAI,GAAGC,MAAO,GAAIC,OAAQ,OAGjD,4BACCN,UAAU,oBACVmB,QA3BuB,kBAAMV,EAAS,CAACW,KAAKC,EAAuCC,KAAKsB,MAyBzF,cCJWC,G,MA9BS,WACvB,IAAMlC,EAAeC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aAAaG,QACvDhB,EAAec,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aAAab,gBAGvDgD,EADmBnC,EAAaoC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEnD,WAAaoD,EAAEpD,WAAc,GAAK,KAC7CqD,MAAM,EAAE,GACrD,OACC,6BACC,6BAASlD,UAAU,oBAClB,uBAAGA,UAAU,iBAAb,qBAGA,yBAAKA,UAAU,yBAEb8C,EAAoB/B,KAAI,SAAAC,GAAW,OAClC,yBAAKC,IAAKD,EAAYE,IACrB,kBAAC,EAAD,CACCjB,KAAMe,EAAYf,KAClBJ,WAAYmB,EAAYnB,WACxBC,aAAcA,aCKRqD,G,MAxBS,WACvB,IAAMxC,EAAeC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aAAaG,QACvDhB,EAAec,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aAAab,gBAEvDsD,EAAyBzC,EAAa0C,QAAQ,SAACC,EAAKtC,GAAN,OAAsBsC,EAAMtC,EAAYnB,aAAY,GACxG,OACC,yBAAKG,UAAU,iBACd,6BACC,6BAASA,UAAU,oBAClB,uBAAGA,UAAU,iBAAb,yBAGA,yBAAKA,UAAU,iDACd,kBAAC,EAAD,CACCH,WAAYuD,EACZtD,aAAcA,UCINyD,MAhBf,WACE,OACI,yBAAKvD,UAAU,OACjB,yBAAKA,UAAU,IACd,kBAAC,EAAD,MACA,kBAAC,EAAD,OAED,yBAAKA,UAAU,IACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNewD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,olBCfN,IAAMrC,EAAgB,CACrBsC,YAAY,EACZ/D,aAAc,KACdgB,KAAM,CACL,CACCI,GAAI,EACJjB,KAAM,aACNJ,WAAY,IAEb,CACCqB,GAAI,EACJjB,KAAM,WACNJ,WAAY,MAEb,CACCqB,GAAI,EACJjB,KAAM,eACNJ,WAAY,QAEb,CACCqB,GAAI,EACJjB,KAAM,eACNJ,WAAY,QAEb,CACCqB,GAAI,EACJjB,KAAM,eACNJ,WAAY,OAEb,CACCqB,GAAI,EACJjB,KAAM,eACNJ,WAAY,WC/BAiE,EDsCa,WAAqC,IAAnCjD,EAAkC,uDAA1BU,EAAewC,EAAW,uCAE/D,OAAQA,EAAO3C,MACd,KAAK4C,EACJ,OAAO,KACHnD,EADJ,CACWC,KAAK,GAAD,mBAAMD,EAAMC,MAAZ,CAAkBiD,EAAOzC,SAEzC,KAAK0C,EACJ,OAAO,KACHnD,EADJ,CACWC,KAAK,YAAKD,EAAMC,KAAKmD,QAAO,SAAA3C,GAAI,OAAIA,EAAKJ,KAAO6C,EAAOzC,WAEnE,KAAK0C,EACJ,OAAO,KACHnD,EADJ,CACWf,aAAciE,EAAOzC,OAEjC,QACC,OAAOT,IEnDKqD,EAJKC,0BAAgB,CACnCxD,aAAcmD,ICEAM,EAFDC,sBAAYH,EAAaI,iC,MCIvCC,IAASC,OACR,kBAAC,IAAD,CAAUJ,MAAOA,GAChB,kBAAC,EAAD,OAEDK,SAASC,eAAe,SLqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d12a141.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/euro.2ce17e11.svg\";","module.exports = __webpack_public_path__ + \"static/media/zloty.cf322526.svg\";","const ADD_TRANSACTION = 'ADD_TRANSACTION';\nconst REMOVE_TRANSACTION = 'REMOVE_TRANSACTION';\nconst CHANGE_EXCHANGE_RATE ='CHANGE_EXCHANGE_RATE';\n\nexport default {\n\tADD_TRANSACTION,\n\tREMOVE_TRANSACTION,\n\tCHANGE_EXCHANGE_RATE,\n}","import React from 'react'\nconst ConvertValue = (props) =>\n\t<div>\n\t\t{Math.round((props.amountEuro * (!props.exchangeRate ? 1 : props.exchangeRate) ) * 100) / 100}\n\t</div>;\n\nexport default ConvertValue;","import React from 'react'\nimport ConvertValue from \"../ConvertValue/ConvertValue\";\nimport euroLogo from '../../../img/euro.svg'\nimport zlotyLogo from '../../../img/zloty.svg'\nimport './InformationTransaction.scss'\n\nconst InformationTransaction = (props) =>\n\t<div className=\"columns\">\n\t\t{!!props.name && <div className=\"column information-name-container\">{props.name}</div>}\n\t\t<div className=\"column\">\n\t\t\t<div className=\"information-value-container\">\n\t\t\t\t<ConvertValue\n\t\t\t\t\tamountEuro={props.amountEuro}/>\n\t\t\t\t<img src={euroLogo} alt=\"\" width={35} height={35}/>\n\t\t\t</div>\n\t\t</div>\n\t\t<div className=\"column\">\n\t\t\t<div className=\"information-value-container\">\n\t\t\t\t<ConvertValue\n\t\t\t\t\tamountEuro={props.amountEuro}\n\t\t\t\t\texchangeRate={props.exchangeRate}\n\t\t\t\t/>\n\t\t\t\t<img src={zlotyLogo} alt=\"\" width={35} height={35}/>\n\t\t\t</div>\n\t\t</div>\n\t</div>;\n\nexport default InformationTransaction","import React from 'react'\nimport { useSelector,useDispatch } from 'react-redux'\nimport {default as transactionsType} from '../../duck/types';\nimport InformationTransaction from '../InformationTransaction/InformationTransaction';\nimport './ListTransactions.scss'\n\nconst ListTransactions = () => {\n\n\tconst dispatch = useDispatch();\n\tconst transactions = useSelector(state => state.transactions.list);\n\tconst exchangeRate = useSelector(state => state.transactions.exchangeRate);\n\n\tconst removeTransaction = (id) => {\n\t\tdispatch({type:transactionsType.REMOVE_TRANSACTION, item:id})\n\t};\n\n\treturn\t<div>\n\t\t{transactions.map(transaction =>\n\t\t\t<div key={transaction.id} className=\"transaction-container notification is-primary\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"delete is-warning\"\n\t\t\t\t\tonClick={()=>removeTransaction(transaction.id)}>\n\t\t\t\t</button>\n\t\t\t\t<InformationTransaction\n\t\t\t\t\tname={transaction.name}\n\t\t\t\t\tamountEuro={transaction.amountEuro}\n\t\t\t\t\texchangeRate={exchangeRate}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)}\n\t</div>;\n\n};\n\n\nexport default ListTransactions","import React, {useReducer} from 'react'\nimport {useDispatch} from 'react-redux';\nimport {default as transactionsType} from '../../duck/types';\nimport uniqid from \"uniqid\"\nimport euroLogo from '../../../img/euro.svg'\nimport './AddTransactions.scss'\n\nconst INITIAL_STATE = {\n\tname: '',\n\tamountEuro: 1,\n};\n\nconst AddTransactions = () => {\n\tconst dispatch = useDispatch();\n\n\tconst [inputsContent, setInputContent] = useReducer(\n\t\t(state,newState)=>({...state, ...newState}),\n\t\t{\n\t\t\tnameTransactionInput: INITIAL_STATE.name,\n\t\t\tamountEuroTransactionInput: INITIAL_STATE.amountEuro\n\t\t}\n\t);\n\n\tconst handleInputChange = e => setInputContent({[e.target.name]:e.target.value});\n\tconst addListItem = () => {\n\t\tconst newTransaction = {\n\t\t\tid: uniqid(),\n\t\t\tname: inputsContent.nameTransactionInput,\n\t\t\tamountEuro: parseFloat(inputsContent.amountEuroTransactionInput)\n\t\t};\n\n\t\tdispatch({\n\t\t\ttype: transactionsType.ADD_TRANSACTION,\n\t\t\titem: newTransaction\n\t\t});\n\n\t\tsetInputContent({\n\t\t\tnameTransactionInput: INITIAL_STATE.name,\n\t\t\tamountEuroTransactionInput: INITIAL_STATE.amountEuro\n\t\t});\n\t};\n\n\tconst isDisabled = inputsContent.nameTransactionInput === '' || inputsContent.amountEuroTransactionInput <= 0;\n\treturn(\n\t\t<article className=\"panel is-warning add-transaction-container\">\n\t\t\t<p className=\"panel-heading\">\n\t\t\t\tAdd New Transaction\n\t\t\t</p>\n\t\t\t<div className=\"add-transaction-bar-container\">\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"nameTransactionInput\"\n\t\t\t\t\tvalue={inputsContent.nameTransactionInput}\n\t\t\t\t\tplaceholder=\"Transaction name\"\n\t\t\t\t\tonChange={handleInputChange}/>\n\t\t\t\t<div className=\"add-transaction-euro-container\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tname=\"amountEuroTransactionInput\"\n\t\t\t\t\t\tvalue={inputsContent.amountEuroTransactionInput}\n\t\t\t\t\t\tplaceholder=\"amountEuroTransactionInput\"\n\t\t\t\t\t\tonChange={handleInputChange}/>\n\t\t\t\t\t<img src={euroLogo} alt=\"\" width={35} height={35}/>\n\t\t\t\t</div>\n\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"button is-warning\"\n\t\t\t\t\tonClick={addListItem}\n\t\t\t\t\tdisabled={isDisabled}>\n\t\t\t\t\tAdd\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</article>\n\t)\n};\n\nexport default AddTransactions","import React, {useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux';\nimport {default as transactionsType} from '../../duck/types';\nimport euroLogo from '../../../img/euro.svg'\nimport zlotyLogo from '../../../img/zloty.svg'\nimport \"./ExchangeRate.scss\";\n\nconst ExchangeRate = () => {\n\tconst dispatch = useDispatch();\n\tconst exchangeRate = useSelector(state => state.transactions.exchangeRate);\n\tconst [inputContent, setInputContent] = useState(exchangeRate);\n\n\tconst handleInputChange = e => setInputContent(e.target.value);\n\n\tconst changeExchangeRate = () => dispatch({type:transactionsType.CHANGE_EXCHANGE_RATE, item:inputContent});\n\n\treturn (\n\t\t<article className=\"panel is-warning\">\n\t\t\t<p className=\"panel-heading\">\n\t\t\t\tChange The PLN Exchange Rate\n\t\t\t</p>\n\t\t\t<div className=\"exchange-rate-bar-container\">\n\t\t\t\t<div className=\"exchange-rate-container\">\n\t\t\t\t\t<div className=\"exchange-rate-euro-container\">\n\t\t\t\t\t\t<span>1</span>\n\t\t\t\t\t\t<img src={euroLogo} alt=\"\" width={35} height={35}/>\n\t\t\t\t\t\t<span>=</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"exchange-rate-input-container\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tname=\"amountEuroTransactionInput\"\n\t\t\t\t\t\t\tvalue={inputContent}\n\t\t\t\t\t\t\tplaceholder=\"amountEuroTransactionInput\"\n\t\t\t\t\t\t\tonChange={handleInputChange}/>\n\t\t\t\t\t\t<img src={zlotyLogo} alt=\"\" width={35} height={35}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"button is-warning\"\n\t\t\t\t\tonClick={changeExchangeRate}>\n\t\t\t\t\tChange\n\t\t\t\t</button>\n\t\t\t</div>\n\t</article>\n\t)\n};\n\nexport default ExchangeRate;","import React from 'react'\nimport {useSelector} from \"react-redux\";\nimport InformationTransaction from \"../InformationTransaction/InformationTransaction\";\nimport './TopTransactions.scss'\n\nconst TopTransactions = () => {\n\tconst transactions = useSelector(state => state.transactions.list);\n\tconst exchangeRate = useSelector(state => state.transactions.exchangeRate);\n\n\tconst sortTransactions = transactions.sort((a, b) => (a.amountEuro < b.amountEuro) ? 1 : -1);\n\tconst topFiveTransactions = sortTransactions.slice(0,3);\n\treturn (\n\t\t<div>\n\t\t\t<article className=\"panel is-primary\">\n\t\t\t\t<p className=\"panel-heading\">\n\t\t\t\t\tTop 3 Transaction\n\t\t\t\t</p>\n\t\t\t\t<div className=\"top-transactions-list\">\n\t\t\t\t\t{\n\t\t\t\t\t\ttopFiveTransactions.map(transaction =>\n\t\t\t\t\t\t\t<div key={transaction.id}>\n\t\t\t\t\t\t\t\t<InformationTransaction\n\t\t\t\t\t\t\t\t\tname={transaction.name}\n\t\t\t\t\t\t\t\t\tamountEuro={transaction.amountEuro}\n\t\t\t\t\t\t\t\t\texchangeRate={exchangeRate}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</article>\n\t\t</div>\n\t)\n};\n\nexport default TopTransactions;","import React from 'react'\nimport {useSelector} from \"react-redux\";\nimport InformationTransaction from \"../InformationTransaction/InformationTransaction\";\nimport './SumTransactions.scss'\n\nconst SumTransactions = () => {\n\tconst transactions = useSelector(state => state.transactions.list);\n\tconst exchangeRate = useSelector(state => state.transactions.exchangeRate);\n\n\tconst sumEuroAllTransactions = transactions.reduce( (sum, transaction) => sum + transaction.amountEuro, 0);\n\treturn (\n\t\t<div className=\"sum-container\">\n\t\t\t<div>\n\t\t\t\t<article className=\"panel is-primary\">\n\t\t\t\t\t<p className=\"panel-heading\">\n\t\t\t\t\t\tTotal Sum Transaction\n\t\t\t\t\t</p>\n\t\t\t\t\t<div className=\"panel-block is-flex sum-information-container\">\n\t\t\t\t\t\t<InformationTransaction\n\t\t\t\t\t\t\tamountEuro={sumEuroAllTransactions}\n\t\t\t\t\t\t\texchangeRate={exchangeRate}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</article>\n\t\t\t</div>\n\t\t</div>\n\t)\n};\n\nexport default SumTransactions","import React from 'react';\nimport './App.scss';\nimport ListTransactions from \"./transactions/components/ListTransactions/ListTransactions\";\nimport AddTransactions from \"./transactions/components/AddTransactions/AddTransactions\";\nimport ExchangeRate from \"./transactions/components/ExchangeRate/ExchangeRate\";\nimport TopTransactions from \"./transactions/components/TopTransactions/TopTransactions\";\nimport SumTransactions from \"./transactions/components/SumTransactions/SumTransactions\";\n\nfunction App() {\n  return (\n      <div className=\"app\">\n\t\t  <div className=\"\">\n\t\t\t  <AddTransactions/>\n\t\t\t  <ListTransactions/>\n\t\t  </div>\n\t\t  <div className=\"\">\n\t\t\t  <ExchangeRate/>\n\t\t\t  <SumTransactions/>\n\t\t\t  <TopTransactions/>\n\t\t  </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import types from './types'\n\n\nconst INITIAL_STATE = {\n\tidGenerator:8,\n\texchangeRate: 4.43,\n\tlist: [\n\t\t{\n\t\t\tid: 1,\n\t\t\tname: 'On Holiday',\n\t\t\tamountEuro: 30\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tname: 'On Party',\n\t\t\tamountEuro: 19.4\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\tname: 'Investment 1',\n\t\t\tamountEuro: 93.872\n\t\t},\n\t\t{\n\t\t\tid: 4,\n\t\t\tname: 'Investment 2',\n\t\t\tamountEuro: 91.875\n\t\t},\n\t\t{\n\t\t\tid: 5,\n\t\t\tname: 'Investment 3',\n\t\t\tamountEuro: 23.87\n\t\t},\n\t\t{\n\t\t\tid: 6,\n\t\t\tname: 'Investment 4',\n\t\t\tamountEuro: 9100.87\n\t\t},\n\n\t]\n};\n\n\nconst transactionsReducer = ( state = INITIAL_STATE, action) => {\n\t\n\tswitch (action.type) {\n\t\tcase types.ADD_TRANSACTION:\n\t\t\treturn {\n\t\t\t\t...state, list: [...state.list, action.item]\n\t\t\t};\n\t\tcase types.REMOVE_TRANSACTION:\n\t\t\treturn {\n\t\t\t\t...state, list: [...state.list.filter(item => item.id !== action.item)]\n\t\t\t};\n\t\tcase types.CHANGE_EXCHANGE_RATE:\n\t\t\treturn {\n\t\t\t\t...state, exchangeRate: action.item\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state\n\t}\n};\n\n\nexport default transactionsReducer","import transactionsReducer from './reducers'\nexport {default as transactionsTypes} from './types'\nexport {default as transactionsActions} from './actions'\n\nexport default transactionsReducer","import { combineReducers } from 'redux'\nimport transactionsReducer from './transactions/duck'\n\nconst rootReducer = combineReducers({\n\ttransactions: transactionsReducer\n});\n\nexport default rootReducer;","import { createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, composeWithDevTools())\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport { Provider } from 'react-redux'\nimport 'bulma'\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}